// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(EduLinkDbContext))]
    [Migration("20230516133914_LowercaseAllSeedData")]
    partial class LowercaseAllSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AppointmentTimeFrameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AudioRecordingId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentsReviewId")
                        .HasColumnType("bigint");

                    b.Property<long>("TutorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TutorsReviewId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTimeFrameId");

                    b.HasIndex("AudioRecordingId")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.HasIndex("StudentsReviewId")
                        .IsUnique();

                    b.HasIndex("TutorId");

                    b.HasIndex("TutorsReviewId")
                        .IsUnique();

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Data.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RegionId", "ZipCode")
                        .IsUnique();

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (15.9819 45.815)"),
                            Name = "zagreb",
                            RegionId = 21L,
                            ZipCode = "10000"
                        },
                        new
                        {
                            Id = 2L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (16.4402 43.5089)"),
                            Name = "split",
                            RegionId = 15L,
                            ZipCode = "21000"
                        },
                        new
                        {
                            Id = 3L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (14.4378 45.3431)"),
                            Name = "rijeka",
                            RegionId = 12L,
                            ZipCode = "51000"
                        },
                        new
                        {
                            Id = 4L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (18.6955 45.5511)"),
                            Name = "osijek",
                            RegionId = 10L,
                            ZipCode = "31000"
                        },
                        new
                        {
                            Id = 5L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (15.2306 44.1194)"),
                            Name = "zadar",
                            RegionId = 19L,
                            ZipCode = "23000"
                        },
                        new
                        {
                            Id = 6L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (13.8481 44.8738)"),
                            Name = "pula",
                            RegionId = 4L,
                            ZipCode = "52100"
                        },
                        new
                        {
                            Id = 7L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (18.016 45.1603)"),
                            Name = "slavonski Brod",
                            RegionId = 2L,
                            ZipCode = "35000"
                        },
                        new
                        {
                            Id = 8L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (15.5481 45.4929)"),
                            Name = "karlovac",
                            RegionId = 5L,
                            ZipCode = "47000"
                        },
                        new
                        {
                            Id = 9L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (16.3366 46.3044)"),
                            Name = "varazdin",
                            RegionId = 16L,
                            ZipCode = "42000"
                        },
                        new
                        {
                            Id = 10L,
                            Coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (15.8958 43.735)"),
                            Name = "sibenik",
                            RegionId = 13L,
                            ZipCode = "22000"
                        });
                });

            modelBuilder.Entity("Data.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("MobileNumberPrefix")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MobileNumberPrefix")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MobileNumberPrefix = "+385",
                            Name = "hrvatska"
                        });
                });

            modelBuilder.Entity("Data.Models.Field", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Field");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "trigonometrija",
                            SubjectId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "algebra",
                            SubjectId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "geometrija",
                            SubjectId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "mehanika",
                            SubjectId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "elektromagnetizam",
                            SubjectId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "termodinamika",
                            SubjectId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "organska kemija",
                            SubjectId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "anorganska kemija",
                            SubjectId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "fizikalna kemija",
                            SubjectId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            Name = "botanika",
                            SubjectId = 4L
                        },
                        new
                        {
                            Id = 11L,
                            Name = "zoologija",
                            SubjectId = 4L
                        },
                        new
                        {
                            Id = 12L,
                            Name = "genetika",
                            SubjectId = 4L
                        });
                });

            modelBuilder.Entity("Data.Models.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Data.Models.LoginTimestamp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AttemptedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsValidLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<TimeSpan?>("LockoutDuration")
                        .HasColumnType("interval");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginTimestamp", null, t =>
                        {
                            t.HasCheckConstraint("CK_\"LoginTimestamp\"_\"LockoutDuration\"_\"IsValidLogin\"", "(\"IsValidLogin\" AND \"LockoutDuration\" IS NULL) OR (NOT \"IsValidLogin\" AND \"LockoutDuration\" >= interval '5 seconds')");
                        });
                });

            modelBuilder.Entity("Data.Models.Message", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Data.Models.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            Name = "bjelovarsko-bilogorska"
                        },
                        new
                        {
                            Id = 2L,
                            CountryId = 1L,
                            Name = "brodsko-posavska"
                        },
                        new
                        {
                            Id = 3L,
                            CountryId = 1L,
                            Name = "dubrovačko-neretvanska"
                        },
                        new
                        {
                            Id = 4L,
                            CountryId = 1L,
                            Name = "istarska"
                        },
                        new
                        {
                            Id = 5L,
                            CountryId = 1L,
                            Name = "karlovačka"
                        },
                        new
                        {
                            Id = 6L,
                            CountryId = 1L,
                            Name = "koprivničko-križevačka"
                        },
                        new
                        {
                            Id = 7L,
                            CountryId = 1L,
                            Name = "krapinsko-zagorska"
                        },
                        new
                        {
                            Id = 8L,
                            CountryId = 1L,
                            Name = "ličko-senjska"
                        },
                        new
                        {
                            Id = 9L,
                            CountryId = 1L,
                            Name = "međimurska"
                        },
                        new
                        {
                            Id = 10L,
                            CountryId = 1L,
                            Name = "osijekčko-baranjska"
                        },
                        new
                        {
                            Id = 11L,
                            CountryId = 1L,
                            Name = "požeško-slavonska"
                        },
                        new
                        {
                            Id = 12L,
                            CountryId = 1L,
                            Name = "primorsko-gorski kotar"
                        },
                        new
                        {
                            Id = 13L,
                            CountryId = 1L,
                            Name = "šibensko-kninska"
                        },
                        new
                        {
                            Id = 14L,
                            CountryId = 1L,
                            Name = "sisačko-moslačka"
                        },
                        new
                        {
                            Id = 15L,
                            CountryId = 1L,
                            Name = "splitsko-dalmatinska"
                        },
                        new
                        {
                            Id = 16L,
                            CountryId = 1L,
                            Name = "varaždinska"
                        },
                        new
                        {
                            Id = 17L,
                            CountryId = 1L,
                            Name = "virovitičko-podravska"
                        },
                        new
                        {
                            Id = 18L,
                            CountryId = 1L,
                            Name = "vukovarsko-srijemska"
                        },
                        new
                        {
                            Id = 19L,
                            CountryId = 1L,
                            Name = "zadarska"
                        },
                        new
                        {
                            Id = 20L,
                            CountryId = 1L,
                            Name = "zagrebačka"
                        },
                        new
                        {
                            Id = 21L,
                            CountryId = 1L,
                            Name = "zagreb"
                        });
                });

            modelBuilder.Entity("Data.Models.StudentsReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasDefaultValue("");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StudentsReview", null, t =>
                        {
                            t.HasCheckConstraint("CK_\"StudentsReview\"_\"Stars\"", "\"Stars\" >= 1 AND \"Stars\" <= 5");
                        });
                });

            modelBuilder.Entity("Data.Models.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "matematika"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "fizika"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "kemija"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "biologija"
                        });
                });

            modelBuilder.Entity("Data.Models.TimeFrame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("TakenByStudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TutoringPostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TakenByStudentId");

                    b.HasIndex("TutoringPostId", "Start", "End")
                        .IsUnique();

                    b.ToTable("TimeFrame", null, t =>
                        {
                            t.HasCheckConstraint("CK_\"TimeFrame\"_\"Start\"", "\"Start\" < \"End\"");
                        });
                });

            modelBuilder.Entity("Data.Models.TutoringPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaidAd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.Property<long>("TutorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.ToTable("TutoringPost", null, t =>
                        {
                            t.HasCheckConstraint("CK_\"TutoringPost\"_\"PricePerHour\"", "\"PricePerHour\" > 0");
                        });
                });

            modelBuilder.Entity("Data.Models.TutoringPostField", b =>
                {
                    b.Property<long>("TutoringPostId")
                        .HasColumnType("bigint");

                    b.Property<long>("FieldId")
                        .HasColumnType("bigint");

                    b.HasKey("TutoringPostId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("TutoringPostField");
                });

            modelBuilder.Entity("Data.Models.TutorsReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Behaviour")
                        .HasColumnType("integer");

                    b.Property<int>("Engagement")
                        .HasColumnType("integer");

                    b.Property<int>("LearningRate")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousKnowledge")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TutorsReview", null, t =>
                        {
                            t.HasCheckConstraint("CK_\"TutorsReview\"_\"Behaviour\"", "\"Behaviour\" >= 1 AND \"Behaviour\" <= 5");

                            t.HasCheckConstraint("CK_\"TutorsReview\"_\"Engagement\"", "\"Engagement\" >= 1 AND \"Engagement\" <= 5");

                            t.HasCheckConstraint("CK_\"TutorsReview\"_\"LearningRate\"", "\"LearningRate\" >= 1 AND \"LearningRate\" <= 5");

                            t.HasCheckConstraint("CK_\"TutorsReview\"_\"PreviousKnowledge\"", "\"PreviousKnowledge\" >= 1 AND \"PreviousKnowledge\" <= 5");
                        });
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<Point>("Coordinates")
                        .HasColumnType("geometry");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<long?>("ProfileImageId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("StripeAccountId")
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ProfileImageId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Data.Models.Appointment", b =>
                {
                    b.HasOne("Data.Models.TimeFrame", "AppointmentTimeFrame")
                        .WithMany()
                        .HasForeignKey("AppointmentTimeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.File", "AudioRecording")
                        .WithOne("Appointment")
                        .HasForeignKey("Data.Models.Appointment", "AudioRecordingId");

                    b.HasOne("Data.Models.TutoringPost", "Post")
                        .WithMany("Appointments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.StudentsReview", "StudentsReview")
                        .WithOne("Appointment")
                        .HasForeignKey("Data.Models.Appointment", "StudentsReviewId");

                    b.HasOne("Data.Models.User", "Tutor")
                        .WithMany("TutoringAppointments")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.TutorsReview", "TutorsReview")
                        .WithOne("Appointment")
                        .HasForeignKey("Data.Models.Appointment", "TutorsReviewId");

                    b.Navigation("AppointmentTimeFrame");

                    b.Navigation("AudioRecording");

                    b.Navigation("Post");

                    b.Navigation("StudentsReview");

                    b.Navigation("Tutor");

                    b.Navigation("TutorsReview");
                });

            modelBuilder.Entity("Data.Models.City", b =>
                {
                    b.HasOne("Data.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Data.Models.Field", b =>
                {
                    b.HasOne("Data.Models.Subject", "Subject")
                        .WithMany("Fields")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Data.Models.LoginTimestamp", b =>
                {
                    b.HasOne("Data.Models.User", "User")
                        .WithMany("LoginTimestamps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Message", b =>
                {
                    b.HasOne("Data.Models.User", "Recipient")
                        .WithMany("RecievedMessages")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Data.Models.Region", b =>
                {
                    b.HasOne("Data.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Data.Models.TimeFrame", b =>
                {
                    b.HasOne("Data.Models.User", "TakenByStudent")
                        .WithMany("StudyAppointments")
                        .HasForeignKey("TakenByStudentId");

                    b.HasOne("Data.Models.TutoringPost", "TutoringPost")
                        .WithMany("AvailableTimeFrames")
                        .HasForeignKey("TutoringPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TakenByStudent");

                    b.Navigation("TutoringPost");
                });

            modelBuilder.Entity("Data.Models.TutoringPost", b =>
                {
                    b.HasOne("Data.Models.User", "Tutor")
                        .WithMany("TutoringPosts")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Data.Models.TutoringPostField", b =>
                {
                    b.HasOne("Data.Models.Field", "Field")
                        .WithMany("TutoringPostsFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.TutoringPost", "TutoringPost")
                        .WithMany("Fields")
                        .HasForeignKey("TutoringPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("TutoringPost");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.HasOne("Data.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.File", "ProfileImage")
                        .WithOne("User")
                        .HasForeignKey("Data.Models.User", "ProfileImageId");

                    b.Navigation("City");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("Data.Models.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Models.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Data.Models.Field", b =>
                {
                    b.Navigation("TutoringPostsFields");
                });

            modelBuilder.Entity("Data.Models.File", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Data.Models.StudentsReview", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Subject", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Data.Models.TutoringPost", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AvailableTimeFrames");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Data.Models.TutorsReview", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("LoginTimestamps");

                    b.Navigation("RecievedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("StudyAppointments");

                    b.Navigation("TutoringAppointments");

                    b.Navigation("TutoringPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
